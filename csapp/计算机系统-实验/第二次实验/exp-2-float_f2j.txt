最大的int类型：0x7fffffff=2147483647
事实上由于有效位数占满了，这个是无法准确表示在浮点类型里面的
最小的int类型：0x80000000=-2147483648
这个是*可以准确表示的，且和上面那个最大int舍入后在float中的表示位级仅仅只是符号位有区别
其指数都是31，32，33？哪个？
试试看
0x4f000000=0   10011110    00000000000000000000000
10011110=158=127+31，小数点右移31位，没错了
但是这个数直接往int转是会溢出的。于是发现只要阶码值>=31就会溢出（此处先只考虑正的情况）
当阶码=30时无论如何都是可以准确表示的。
当为负数时呢？
阶码=31时，只有尾数全0时可以准确表示，其余都会溢出

于是0x800000000u的界限就这么确定了

当低于界限时：
1，判定符号，浮点数转int类型符号不能简单的或上去，因为int0x80000000反而是最小的负数
2，阶码转指数并进行位移
尾数移位

31-23=8

0 00000001 1000
0 110000=0x60000000=1610612736


0   01111111    00000000000000000000000
	        1.00000000000000000000000 